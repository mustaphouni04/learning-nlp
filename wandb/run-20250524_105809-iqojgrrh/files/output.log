  0%|                                                                                                                                                                                                                                                                                         | 0/236 [00:00<?, ?it/s]Passing a tuple of `past_key_values` is deprecated and will be removed in Transformers v4.48.0. You should pass an instance of `EncoderDecoderCache` instead, e.g. `past_key_values=EncoderDecoderCache.from_legacy_cache(past_key_values)`.
  0%|█▏                                                                                                                                                                                                                                                                               | 1/236 [00:01<04:11,  1.07s/it]
Traceback (most recent call last):
  File "/home/melaichouni/Desktop/learning-nlp/asho_project.py", line 55, in <module>
    loss.backward()
  File "/home/melaichouni/.virtualenvs/dev/lib/python3.10/site-packages/torch/_tensor.py", line 648, in backward
    torch.autograd.backward(
  File "/home/melaichouni/.virtualenvs/dev/lib/python3.10/site-packages/torch/autograd/__init__.py", line 353, in backward
    _engine_run_backward(
  File "/home/melaichouni/.virtualenvs/dev/lib/python3.10/site-packages/torch/autograd/graph.py", line 824, in _engine_run_backward
    return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 1.91 GiB. GPU 0 has a total capacity of 11.90 GiB of which 394.12 MiB is free. Including non-PyTorch memory, this process has 11.50 GiB memory in use. Of the allocated memory 9.42 GiB is allocated by PyTorch, and 1.91 GiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
Traceback (most recent call last):
  File "/home/melaichouni/Desktop/learning-nlp/asho_project.py", line 55, in <module>
    loss.backward()
  File "/home/melaichouni/.virtualenvs/dev/lib/python3.10/site-packages/torch/_tensor.py", line 648, in backward
    torch.autograd.backward(
  File "/home/melaichouni/.virtualenvs/dev/lib/python3.10/site-packages/torch/autograd/__init__.py", line 353, in backward
    _engine_run_backward(
  File "/home/melaichouni/.virtualenvs/dev/lib/python3.10/site-packages/torch/autograd/graph.py", line 824, in _engine_run_backward
    return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 1.91 GiB. GPU 0 has a total capacity of 11.90 GiB of which 394.12 MiB is free. Including non-PyTorch memory, this process has 11.50 GiB memory in use. Of the allocated memory 9.42 GiB is allocated by PyTorch, and 1.91 GiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
